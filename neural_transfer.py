# -*- coding: utf-8 -*-
"""Neural_Transfer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y8udlY77p65ZqTCiNyTBGFasz_utd7ry
"""

# 0. Import Dependencies and Pretrained Model
import tensorflow_hub as hub
import tensorflow as tf
from matplotlib import pyplot as plt
import numpy as np
import cv2

# Load the pre-trained model
model = hub.load('https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2')

# 1. Preprocess Image and Load
def load_image(img_path, max_dim=512):
    img = tf.io.read_file(img_path)
    img = tf.image.decode_image(img, channels=3, expand_animations=False)

    img = tf.image.convert_image_dtype(img, tf.float32)  # Ensures correct data type

    # Resize with proper type handling
    shape = tf.shape(img)[:-1]
    scale = max_dim / tf.reduce_max(tf.cast(shape, tf.float32))  # Float division
    new_shape = tf.cast(tf.cast(shape, tf.float32) * scale, tf.int32)  # Ensure int32 shape before resizing
    img = tf.image.resize(img, new_shape)

    img = img[tf.newaxis, :]  # Add batch dimension
    return img

# 2. Load images
content_image = load_image('/content/Painting.jpg')
style_image = load_image('/content/texture.jpg')

# 3. Ensure correct data type for model input
content_image = tf.constant(content_image, dtype=tf.float32)
style_image = tf.constant(style_image, dtype=tf.float32)

# 4. Visualize Images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title("Content Image")
plt.imshow(content_image[0])
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title("Style Image")
plt.imshow(style_image[0])
plt.axis('off')
plt.show()

# 5. Stylize Image
stylized_image = model(content_image, style_image)[0]

# 6. Save the Stylized Image Correctly
output_image = np.array(stylized_image[0] * 255, dtype=np.uint8)
cv2.imwrite('generated_img.jpg', cv2.cvtColor(output_image, cv2.COLOR_RGB2BGR))

# 7. Display Result
plt.figure(figsize=(6, 6))
plt.title("Stylized Image")
plt.imshow(stylized_image[0])
plt.axis('off')
plt.show()